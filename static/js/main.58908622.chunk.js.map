{"version":3,"sources":["MainNavBar.js","MainCard.js","ImageCard.js","App.js","serviceWorker.js","index.js"],"names":["MainNavBar","Navbar","expand","fixed","variant","Brand","href","src","width","height","alt","Toggle","aria-controls","Collapse","id","Nav","className","Link","Button","React","Component","MainCard","props","button","style","content","Jumbotron","title","description","ImageCard","Card","Img","img","Body","Title","Text","text","App","CardDeck","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAsCeA,G,6KA1BP,OACI,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,MAAM,MAAMC,QAAQ,QACpC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SACf,yBACAC,IAAI,0BACJC,MAAM,OACNC,OAAO,KACPC,IAAI,iBALR,WASA,kBAACT,EAAA,EAAOU,OAAR,CAAeC,gBAAc,0BAC7B,kBAACX,EAAA,EAAOY,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACZ,kBAACD,EAAA,EAAIE,KAAL,CAAUX,KAAK,UAAf,aAEH,kBAACS,EAAA,EAAD,KACG,kBAACG,EAAA,EAAD,CAAQF,UAAU,OAAOZ,QAAQ,iBAAjC,aACA,kBAACc,EAAA,EAAD,CAAQF,UAAU,OAAOZ,QAAQ,WAAjC,2B,GApBEe,IAAMC,Y,cCiBfC,MAnBhB,SAAkBC,GACd,IAAIC,EAOJ,MAN2B,oBAAjBD,EAAMC,SACZA,EACC,2BACG,kBAACL,EAAA,EAAD,CAAQd,QAASkB,EAAMC,OAAOC,OAAQF,EAAMC,OAAOE,WAIvD,kBAACC,EAAA,EAAD,CAAWZ,GAAIQ,EAAMR,GAAIE,UAAWM,EAAMN,WACtC,4BAAKM,EAAMK,OACX,2BAAIL,EAAMM,aACTL,I,cCFEM,MAZf,SAAmBP,GACf,OACI,kBAACQ,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,CAAU3B,QAAQ,MAAMG,IAAKe,EAAMU,MACnC,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACH,EAAA,EAAKI,MAAN,KAAaZ,EAAMK,OACnB,kBAACG,EAAA,EAAKK,KAAN,KAAYb,EAAMc,S,cCuCnBC,MAzCf,WAKE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEA,UAAU,UACVW,MAAM,8BACNC,YAAY,kHACZL,OAZa,CACnBC,MAAO,UACPC,QAAS,sBAYH,kBAACa,EAAA,EAAD,KACI,kBAAC,EAAD,CACEN,IAAI,kCACJL,MAAM,mCACNS,KAAK,mGACP,kBAAC,EAAD,CACEJ,IAAI,2BACJL,MAAM,+BACNS,KAAK,6KAEP,kBAAC,EAAD,CACEJ,IAAI,2BACJL,MAAM,YACNS,KAAK,2HAEb,kBAAC,EAAD,CACEpB,UAAU,UACVW,MAAM,mBACNC,YAAY,4LAEZd,GAAG,aCjCOyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.58908622.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './css/MainNavBar.css'\r\n\r\n\r\n\r\nclass MainNavBar extends React.Component {\r\n    render() {\r\n        return(\r\n            <Navbar expand=\"lg\" fixed=\"top\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">\r\n                    <img \r\n                    src=\"./images/small_logo.png\"\r\n                    width=\"auto\"\r\n                    height=\"30\"\r\n                    alt=\"coveree_logo\"\r\n                     />\r\n                    Coveree\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                       <Nav.Link href=\"#about\">A propos</Nav.Link>\r\n                    </Nav>\r\n                    <Nav>\r\n                       <Button className=\"mr-3\" variant=\"outline-light\">Connexion</Button>\r\n                       <Button className=\"mr-3\" variant=\"warning\">Obtenir mon prix</Button>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainNavBar","import React from 'react';\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './css/MainCard.css';\r\n\r\n\r\nfunction MainCard(props) {\r\n    let button;\r\n    if(typeof(props.button) != 'undefined') {\r\n        button = \r\n        (<p>\r\n            <Button variant={props.button.style}>{props.button.content}</Button>\r\n        </p>);\r\n    }\r\n    return (\r\n        <Jumbotron id={props.id} className={props.className}>\r\n            <h1>{props.title}</h1>\r\n            <p>{props.description}</p>\r\n            {button}\r\n        </Jumbotron>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default  MainCard","import React from 'react';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport './css/ImageCard.css';\r\n\r\nfunction ImageCard(props) {\r\n    return (\r\n        <Card>\r\n            <Card.Img variant=\"top\" src={props.img} />\r\n            <Card.Body>\r\n                <Card.Title>{props.title}</Card.Title>\r\n                <Card.Text>{props.text}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ImageCard","import React from 'react';\n\nimport MainNavBar from './MainNavBar.js';\nimport MainCard from './MainCard.js';\nimport ImageCard from './ImageCard.js';\nimport CardDeck from 'react-bootstrap/CardDeck'\n\nimport './css/App.css';\n\n\nfunction App() {\n  const button_price = {\n    style: \"warning\",\n    content: \"Obtenir mon prix\" \n  }\n  return (\n    <div className=\"App\">\n      <MainNavBar />\n      <div className=\"container\">\n        <MainCard\n          className=\"mx-auto\"\n          title=\"Une assurance 100% digitale\" \n          description=\"Recevez une estimation de votre contrat personalisé en quelques clics. Cela ne prendra que quelques minutes.\"\n          button={button_price}\n          />\n          <CardDeck>\n              <ImageCard \n                img=\"./images/contrat_real_front.png\"\n                title=\"Transparence et personnalisation\"\n                text=\"Nos contrats sont fait sur mesure, vous avez la maitrise sur les conditions de vos couvertures\"/>\n              <ImageCard \n                img=\"./images/temps_front.jpg\"\n                title=\"Rapidité et légerté\"\n                text=\"Votre temps est précieux, c'est pourquoi nous avons développé\n                des services simples et rapides pour que vous n'ayez jamais à vous soucier de votre couverture\"/>\n              <ImageCard \n                img=\"./images/coins_front.jpg\"\n                title=\"Abordable\"\n                text=\"Nos solutions de couverture personalisées peuvent s'adapter à tout les budget, c'est vous qui maitrisez le prix\"/>\n        </CardDeck>\n        <MainCard \n          className=\"section\"\n          title=\"A propos de nous\" \n          description=\"Coveree est une assurance 100% digitale. Les technologies innovantes que nous utilisons vous permettent d'obtenir\n          rapidement et simplement des estimations de prix lors de vos sinistres.\"\n          id=\"about\" />\n      </div>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}